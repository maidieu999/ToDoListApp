{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","reportWebVitals.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["LIST_ALL","SAVE_TASK","TOGGLE_FORM","CLOSE_FORM","OPEN_FORM","UPDATE_STATUS","DELETE_TASK","EDIT_TASK","FILTER_TABLE","SEARCH","SORT","closeForm","type","types","openForm","editTask","task","TaskForm","props","onCloseForm","onChange","event","target","name","value","setState","onSubmit","preventDefault","onSaveTask","state","onClear","status","id","this","itemEditing","prevProps","isDisplayForm","className","onClick","required","Component","connect","dispatch","actions","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","by","role","sort","Control","TaskItem","onUpdateStatus","onDeleteTask","onEditTask","onOpenForm","index","TaskList","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","toLowerCase","indexOf","task1","task2","elementTask","map","search","App","onToggleForm","onClearTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","s4","Math","floor","random","toString","substring","generateId","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","newTask","push","setItem","stringify","splice","parseInt","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";wPAAaA,EAAW,WACXC,EAAY,YACZC,EAAc,cACdC,EAAa,aACbC,EAAY,YACZC,EAAgB,gBAChBC,EAAc,cACdC,EAAY,YACZC,EAAe,eACfC,EAAS,SACTC,EAAO,OCSPC,EAAY,WACrB,MAAO,CACHC,KAAMC,IAGDC,EAAW,WACpB,MAAO,CACHF,KAAMC,IAgBDE,EAAW,SAACC,GACrB,MAAO,CACHJ,KAAMC,EACNG,KAAMA,I,OCzCRC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA8CVC,YAAc,WACV,EAAKD,MAAMC,eAhDI,EAmDnBC,SAAW,SAACC,GACR,IAAIC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MACP,WAATD,IACCC,EAAyB,SAAjBF,EAAOE,OAKnB,EAAKC,SAAL,eACKF,EAAOC,KA9DG,EAwEnBE,SAAW,SAACL,GACRA,EAAMM,iBAEN,EAAKT,MAAMU,WAAW,EAAKC,OAE3B,EAAKC,UACL,EAAKX,eA9EU,EAiFnBW,QAAU,WACN,EAAKL,SAAS,CACVF,KAAM,GACNQ,QAAQ,KAlFZ,EAAKF,MAAQ,CACTG,GAAI,GACJT,KAAM,GACNQ,QAAQ,GALG,E,qDAUnB,WACOE,KAAKf,MAAMgB,aAA6C,OAA9BD,KAAKf,MAAMgB,YAAYF,GAChDC,KAAKR,SAAS,CACVO,GAAIC,KAAKf,MAAMgB,YAAYF,GAC3BT,KAAMU,KAAKf,MAAMgB,YAAYX,KAC7BQ,OAAQE,KAAKf,MAAMgB,YAAYH,SAInCE,KAAKH,Y,gCAkBb,SAAmBK,GACZA,EAAUD,cAAgBD,KAAKf,MAAMgB,aACtCD,KAAKR,SAAS,CACZO,GAAKC,KAAKf,MAAMgB,YAAYF,GAC5BT,KAAOU,KAAKf,MAAMgB,YAAYX,KAC9BQ,OAASE,KAAKf,MAAMgB,YAAYH,W,oBA8CxC,WAAU,IAAD,OAEL,OAAIE,KAAKf,MAAMkB,cAEP,sBAAKC,UAAU,sBAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,qBAAIA,UAAU,cAAd,eAAgCJ,KAAKJ,MAAMG,GAAK,uCAAuB,4BACvE,sBAAMK,UAAU,gCAAgCC,QAAUL,KAAKd,mBAInE,qBAAKkB,UAAU,aAAf,SACA,uBAAMX,SAAUO,KAAKP,SAArB,UACI,sBAAKW,UAAU,aAAf,UACA,6CACA,uBACIzB,KAAK,OACLyB,UAAU,eACVd,KAAK,OAELC,MAAOS,KAAKJ,MAAMN,KAClBH,SAAUa,KAAKb,cAInB,yDACA,yBACIiB,UAAU,eACVE,SAAS,WACThB,KAAK,SACLC,MAAOS,KAAKJ,MAAME,OAClBX,SAAUa,KAAKb,SALnB,UAMQ,wBAAQI,OAAO,EAAf,+BACA,wBAAQA,OAAO,EAAf,wBAER,uBACA,sBAAKa,UAAU,cAAf,UACA,wBAAQzB,KAAK,SAASyB,UAAU,kBAAhC,SAAmDJ,KAAKJ,MAAMG,GAAK,oBAAY,YAD/E,OAEA,wBAAQpB,KAAK,SAASyB,UAAU,iBAAiBC,QAAS,kBAAM,EAAKR,WAArE,yCApCqB,S,GA3FtBU,aAgKRC,eAvBS,SAACZ,GACrB,MAAO,CACHO,cAAeP,EAAMO,cACrBF,YAAaL,EAAMK,gBAKA,SAACQ,GACxB,MAAO,CACHd,WAAY,SAACZ,GAET0B,EDlJY,SAAC1B,GACrB,MAAO,CACHJ,KAAMC,EACNG,KAAMA,GC+IO2B,CAAiB3B,KAE9BG,YAAa,WACTuB,EAASC,SAQNF,CAA6CxB,GChKtD2B,E,kDACF,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAMVE,SAAW,SAACC,GACR,IAAIC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MACnB,EAAKC,SAAL,eACKF,EAAOC,KAZG,EAgBnBqB,SAAW,WACP,EAAK3B,MAAM2B,SAAS,EAAKhB,MAAMiB,UAf/B,EAAKjB,MAAQ,CACTiB,QAAS,IAHE,E,0CAoBnB,WACI,IAAMA,EAAYb,KAAKJ,MAAjBiB,QACN,OACQ,qBAAKT,UAAU,sCAAf,SACI,sBAAKA,UAAU,cAAf,UACI,uBAAOzB,KAAK,OACJyB,UAAU,eACVU,YAAY,+BACZvB,MAAQsB,EACRvB,KAAK,UACLH,SAAWa,KAAKb,WAExB,sBAAMiB,UAAU,kBAAhB,SACA,yBAAQA,UAAU,kBAAkBzB,KAAK,SAAS0B,QAAUL,KAAKY,SAAjE,UACI,sBAAMR,UAAU,sBADpB,uB,GAlCHG,aAyDNC,eAZS,SAACZ,GACrB,MAAO,MAIgB,SAACa,EAAUxB,GAClC,MAAO,CACH2B,SAAU,SAACC,GACPJ,EFAc,SAACI,GACvB,MAAO,CACHlC,KAAMC,EACNiC,QAASA,GEHIH,CAAmBG,QAIzBL,CAA6CG,GCzDtDI,E,4MAiCFV,QAAU,SAACW,EAAQC,GACf,EAAKhC,MAAMiC,OAAO,CACdC,GAAIH,EACJzB,MAAO0B,K,4CAGf,WAAU,IAAD,OACL,OAEQ,qBAAKb,UAAU,sCAAf,SACI,sBAAKA,UAAU,WAAf,UACI,yBAAQA,UAAU,kCAAkCzB,KAAK,SAASoB,GAAG,gBAAgB,cAAY,WAAW,gBAAc,OAAO,gBAAc,OAA/I,+BACQ,sBAAMK,UAAU,sCAExB,qBAAIA,UAAU,gBAAgB,kBAAgB,gBAA9C,UACA,oBAAIC,QAAU,kBAAK,EAAKA,QAAQ,OAAQ,IAAxC,SACI,qBAAKe,KAAK,SACNhB,UAAmC,SAAvBJ,KAAKf,MAAMoC,KAAKF,IAA2C,IAA1BnB,KAAKf,MAAMoC,KAAK9B,MAAe,gBAAiB,GADjG,SAGA,sBAAMa,UAAU,4BAAhB,4BAKJ,oBAAIC,QAAU,kBAAK,EAAKA,QAAQ,QAAS,IAAzC,SACI,qBAAMe,KAAK,SACPhB,UAAmC,SAAvBJ,KAAKf,MAAMoC,KAAKF,KAA4C,IAA3BnB,KAAKf,MAAMoC,KAAK9B,MAAgB,gBAAiB,GADlG,SAIA,sBAAMa,UAAU,6BAAhB,4BAKJ,oBAAIgB,KAAK,YAAYhB,UAAU,YAC/B,6BACI,qBAAKgB,KAAK,SACNf,QAAU,kBAAK,EAAKA,QAAQ,SAAU,IACtCD,UAAmC,WAAvBJ,KAAKf,MAAMoC,KAAKF,IAA6C,IAA1BnB,KAAKf,MAAMoC,KAAK9B,MAAe,gBAAiB,GAFnG,uDAMJ,6BACI,qBAAK6B,KAAK,SACNf,QAAU,kBAAK,EAAKA,QAAQ,UAAW,IACvCD,UAAmC,WAAvBJ,KAAKf,MAAMoC,KAAKF,KAA8C,IAA3BnB,KAAKf,MAAMoC,KAAK9B,MAAgB,gBAAiB,GAFpG,sD,GA5ETgB,aAoGJC,eAZS,SAACZ,GACrB,MAAO,CACHyB,KAAMzB,EAAMyB,SAGO,SAACZ,EAAUxB,GAClC,MAAO,CACHiC,OAAQ,SAACG,GACLZ,EHpCY,SAACY,GACrB,MAAO,CACH1C,KAAMC,EACNyC,KAAMA,GGiCOX,CAAiBW,QAIvBb,CAA6CO,GC1F7CO,E,4JATX,WACI,OACI,sBAAKlB,UAAU,oBAAf,UACI,cAAE,EAAF,IACA,cAAE,EAAF,W,GALMG,aCDhBgB,E,4MAEFC,eAAiB,WACb,EAAKvC,MAAMuC,eAAe,EAAKvC,MAAMF,KAAKgB,K,EAE9C0B,aAAe,WACX,EAAKxC,MAAMwC,aAAa,EAAKxC,MAAMF,KAAKgB,IACxC,EAAKd,MAAMC,e,EAEfwC,WAAa,WACT,EAAKzC,MAAM0C,aACX,EAAK1C,MAAMyC,WAAW,EAAKzC,MAAMF,O,4CAGrC,WAEI,IAAI,EAAkBiB,KAAKf,MAArBF,EAAN,EAAMA,KAAM6C,EAAZ,EAAYA,MACZ,OACI,+BACI,6BAAMA,EAAQ,IACd,6BAAM7C,EAAKO,OACX,oBAAIc,UAAU,cAAd,SACA,sBACIA,WAA4B,IAAhBrB,EAAKe,OAAkB,sBAAyB,qBAC5DO,QAAUL,KAAKwB,eAFnB,UAGsB,IAAhBzC,EAAKe,OAAkB,oBAAe,cAI5C,qBAAIM,UAAU,cAAd,UACA,yBAAQzB,KAAK,SAASyB,UAAU,kBAAkBC,QAAYL,KAAK0B,WAAnE,UACI,sBAAMtB,UAAU,sBADpB,cADA,OAKA,yBAAQzB,KAAK,SAASyB,UAAU,iBAAiBC,QAAYL,KAAKyB,aAAlE,UACI,sBAEIrB,UAAU,qBAHlB,sB,GAlCOG,aAqERC,eAxBS,SAACZ,GACrB,MAAO,CACHO,cAAeP,EAAMO,kBAGF,SAACM,EAAUxB,GAClC,MAAO,CACHuC,eAAgB,SAACzB,GACbU,EL3BgB,SAACV,GACzB,MAAO,CACHpB,KAAMC,EACNmB,GAAIA,GKwBSW,CAAqBX,KAElC0B,aAAc,SAAC1B,GACXU,ELvBc,SAACV,GACvB,MAAO,CACHpB,KAAMC,EACNmB,GAAIA,GKoBSW,CAAmBX,KAEhCb,YAAa,WACTuB,EAASC,MAEbiB,WAAY,WACRlB,EAASC,MAEbgB,WAAY,SAAC3C,GACT0B,EAASC,EAAiB3B,QAIvByB,CAA6Ce,GCnEtDM,E,kDACF,WAAY5C,GAAQ,IAAD,8BACf,cAAMA,IAOVE,SAAW,SAACC,GACR,IAAIC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MACfuC,EAAS,CACTxC,KAAe,eAATA,EAAwBC,EAAQ,EAAKK,MAAMmC,WACjDjC,OAAiB,iBAATR,EAA0BC,EAAQ,EAAKK,MAAMoC,cAEzD,EAAK/C,MAAMgD,cAAcH,GAEzB,EAAKtC,SAAL,eACKF,EAAOC,KAjBZ,EAAKK,MAAQ,CACTmC,WAAY,GACZC,cAAe,GAJJ,E,0CAsBnB,WAEI,IAAI,EAA+BhC,KAAKJ,MAAlCoC,EAAN,EAAMA,aAAcD,EAApB,EAAoBA,WAChB,EAAwC/B,KAAKf,MAA3CiD,EAAN,EAAMA,MAAOC,EAAb,EAAaA,YAAatB,EAA1B,EAA0BA,QAASQ,EAAnC,EAAmCA,KAE/Bc,IACIA,EAAY7C,OACZ4C,EAAQA,EAAMJ,QAAO,SAAC/C,GAClB,OAA4E,IAArEA,EAAKO,KAAK8C,cAAcC,QAAQF,EAAY7C,KAAK8C,mBAG5DD,EAAYrC,SACZoC,EAAQA,EAAMJ,QAAO,SAAC/C,GAClB,OAA4B,IAAxBoD,EAAYrC,OAAsBoC,EAE3BnD,EAAKe,UAAmC,IAAvBqC,EAAYrC,aAMhDe,IACAqB,EAAQA,EAAMJ,QAAO,SAAC/C,GAClB,OAAmE,IAA5DA,EAAKO,KAAK8C,cAAcC,QAAQxB,EAAQuB,mBAGnDf,IACgB,SAAZA,EAAKF,GACLe,EAAMb,MAAK,SAACiB,EAAOC,GACf,OAAID,EAAMhD,KAAOiD,EAAMjD,KAAa+B,EAAK9B,MAChC+C,EAAMhD,KAAOiD,EAAMjD,MAAc+B,EAAK9B,MACnC,KAIhB2C,EAAMb,MAAK,SAACiB,EAAOC,GACf,OAAID,EAAMxC,OAASyC,EAAMzC,QAAgBuB,EAAK9B,MACrC+C,EAAMxC,OAASyC,EAAMzC,OAAeuB,EAAK9B,MACtC,MAMxB,IAAIiD,EAAcN,EAAMO,KAAI,SAAC1D,EAAM6C,GAC/B,OAAO,cAAE,EAAF,CAEHA,MAAOA,EACP7C,KAAMA,GAFDA,EAAKgB,OAMlB,OACI,wBAAOK,UAAU,yCAAjB,UACI,gCACI,+BACI,oBAAIA,UAAU,cAAd,iBACA,oBAAIA,UAAU,cAAd,oBACA,oBAAIA,UAAU,cAAd,gCACA,oBAAIA,UAAU,cAAd,yCAGR,kCACI,+BACI,uBACA,6BACI,uBAAOzB,KAAK,OACRyB,UAAU,eACVd,KAAK,aACLC,MAAOwC,EACP5C,SAAUa,KAAKb,aAGvB,6BACI,yBAAQiB,UAAU,eACdd,KAAK,eACLC,MAAOyC,EACP7C,SAAUa,KAAKb,SAHnB,UAKI,wBAAQI,OAAQ,EAAhB,8BACA,wBAAQA,MAAO,EAAf,qBACA,wBAAQA,MAAO,EAAf,oCAGR,0BAEHiD,Y,GA7GEjC,aAyIRC,eAlBS,SAACZ,GACrB,MAAO,CACHsC,MAAOtC,EAAMsC,MACbC,YAAavC,EAAMuC,YACnBhC,cAAeP,EAAMO,cACrBU,QAASjB,EAAM8C,OACfrB,KAAMzB,EAAMyB,SAIO,SAACZ,EAAUxB,GAClC,MAAO,CACHgD,cAAe,SAACH,GACZrB,ENxFc,SAACqB,GACvB,MAAO,CACHnD,KAAMC,EACNkD,OAAQA,GMqFKpB,CAAmBoB,QAKzBtB,CAA6CqB,GCpItDc,G,kNAEFC,aAAe,WACX,IAAI3C,EAAc,EAAKhB,MAAMgB,YAE1BA,GAAkC,KAAnBA,EAAYF,GAC1B,EAAKd,MAAM0C,aAIX,EAAK1C,MAAM2D,eAGf,EAAK3D,MAAM4D,YAAY,CACnB9C,GAAI,GACJT,KAAM,GACNQ,QAAQ,K,4CAIhB,WACI,OACG,sBAAKM,UAAU,YAAf,UACK,sBAAKA,UAAU,cAAf,UACI,mEACA,0BAEJ,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAYJ,KAAKf,MAAMkB,cAAgB,sCAAwC,GAApF,SACA,cAAE,EAAF,MAEA,sBAAKC,UAAaJ,KAAKf,MAAMkB,cAAgB,sCAAwC,0CAArF,UACI,yBAAQxB,KAAK,SAASyB,UAAU,kBAAkBC,QAASL,KAAK4C,aAAhE,UACI,sBAAMxC,UAAU,oBADpB,+BAGJ,qBAAKA,UAAU,WAAf,SACI,cAAE,EAAF,MAEJ,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,0CAAf,SACI,cAAE,EAAF,qB,GAxCVG,cAgFHC,eA3BS,SAACZ,GAErB,MAAO,CACHO,cAAeP,EAAMO,cACrBF,YAAaL,EAAMK,gBAIA,SAACQ,EAAUxB,GAClC,MAAO,CAEH2D,aAAc,WACVnC,EP5DD,CACH9B,KAAMC,KO+DN+C,WAAY,WACRlB,EAASC,MAEbmC,YAAa,SAAC9D,GAEV0B,EAASC,EAAiB3B,QAMvByB,CAA6CmC,GC9E7CG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCLVQ,EAAK,WACL,OAAOC,KAAKC,MAA6B,OAArB,EAAID,KAAKE,WAAsBC,SAAS,IAAIC,UAAU,IAE1EC,EAAa,WACb,OAAON,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAQA,KAE7DO,EAAY,SAAC5B,EAAOnC,GACpB,IAAIgE,GAAU,EAOd,OANA7B,EAAM8B,SAAQ,SAACjF,EAAM6C,GACjB,GAAG7C,EAAKgB,KAAOA,EACX,OAAOgE,EAASnC,KAIjBmC,GAEPE,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UAEvCC,EAAeL,GAAc,GAE7BlE,EAAK,EACL6B,GAAS,EAoEE2C,EAjEC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,EAAcE,EAAW,uCAC9C,OAAQA,EAAO7F,MACX,KAAKC,EACD,OAAOgB,EAEX,KAAKhB,EASD,IAAI6F,EAAU,CACV1E,GAAIyE,EAAOzF,KAAKgB,GAAKyE,EAAOzF,KAAKgB,GAAK,KACtCT,KAAMkF,EAAOzF,KAAKO,KAClBQ,OAAQ0E,EAAOzF,KAAKe,QAexB,OAZkB,OAAf2E,EAAQ1E,IACP0E,EAAQ1E,GAAK8D,IAEbjE,EAAM8E,KAAKD,IAGX7E,EADAgC,EAAQkC,EAAUlE,EAAO6E,EAAQ1E,KAClB0E,EAGnBL,aAAaO,QAAQ,QAAST,KAAKU,UAAUhF,IAGtC,YAAIA,GAEf,KAAKhB,EAkBD,OAjBAmB,EAAKyE,EAAOzE,GAUZH,EATAgC,EAAQkC,EAAUlE,EAAOG,IASzB,2BACOH,EAAMgC,IADb,IAEI9B,QAASF,EAAMgC,GAAO9B,SAG1BsE,aAAaO,QAAQ,QAAST,KAAKU,UAAUhF,IAEtC,YAAIA,GACf,KAAKhB,EAOD,OANAmB,EAAKyE,EAAOzE,IAEE,KADd6B,EAAQkC,EAAUlE,EAAOG,MAErBH,EAAMiF,OAAOjD,EAAO,GACpBwC,aAAaO,QAAQ,QAAST,KAAKU,UAAUhF,KAE1C,YAAIA,GACf,QAAS,OAAOA,ICjET2E,EAjBC,WAAmC,IAAlC3E,EAAiC,wDAAX4E,EAAW,uCAC9C,OAAQA,EAAO7F,MACX,KAAKC,EAED,OADAgB,GAASA,EAGb,KAAKhB,EAED,OADAgB,GAAQ,EAGZ,KAAKhB,EAED,OADAgB,GAAQ,EAGZ,QAAS,OAAOA,IClBpB0E,GAAe,CACfvE,GAAI,GACJT,KAAM,GACNQ,QAAQ,GAaGyE,GAVC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,GAAcE,EAAW,uCAC9C,OAAOA,EAAO7F,MACV,KAAKC,EACD,OAAO4F,EAAOzF,KAElB,QAAS,OAAOa,ICVpB0E,GAAe,CACfhF,KAAM,GACNQ,QAAS,GAaEyE,GAXC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,GAAcE,EAAW,uCAC9C,OAAQA,EAAO7F,MACX,KAAKC,EAGD,OAFA4F,EAAO1C,OAAOhC,OAASgF,SAASN,EAAO1C,OAAOhC,OAAQ,IAE/C0E,EAAO1C,OAElB,QAAS,OAAOlC,ICFT2E,GARC,WAAmC,IAAlC3E,EAAiC,uDAF/B,GAEoB4E,EAAW,uCAC9C,OAAQA,EAAO7F,MACX,KAAKC,EACD,OAAO4F,EAAO3D,QAElB,QAAS,OAAOjB,ICNpB0E,GAAe,CACfnD,GAAI,OACJ5B,MAAO,GAcIgF,GAZC,WAAmC,IAAlC3E,EAAiC,uDAAzB0E,GAAcE,EAAW,uCAC9C,OAAQA,EAAO7F,MACX,KAAKC,EACD,MAAO,CACHuC,GAAIqD,EAAOnD,KAAKF,GAChB5B,MAAOiF,EAAOnD,KAAK9B,OAG3B,QAAS,OAAOK,ICGT2E,GATGQ,YAAgB,CAC9B7C,MAAOA,EACP/B,cAAeA,EACfF,YAAaA,GACbkC,YAAaA,GACbO,OAAQA,GACRrB,KAAMA,KCHJ2D,GAAQC,YAAYV,GAAWW,OAAOC,8BAAgCD,OAAOC,gCAEnFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,EAAD,QAIJO,SAASC,eAAe,SAG1B1C,M","file":"static/js/main.c3e1a59a.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';\r\n","// import TaskList from '../components/TaskList'\r\nimport * as types from './../constants/ActionTypes'\r\nexport const listAll  = () => {\r\n    return {\r\n        type: types.LIST_ALL,\r\n    }\r\n}\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task: task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n    }\r\n}\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n    }\r\n}\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id: id\r\n    }\r\n}\r\nexport const editTask = (task) => {\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task: task\r\n    }\r\n}\r\n//filter la object gom name va status\r\nexport const filterTask = (filter) => {\r\n    return {\r\n        type: types.FILTER_TABLE,\r\n        filter: filter\r\n    }\r\n\r\n}\r\n//keyword phai la kieu string\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type: types.SEARCH,\r\n        keyword: keyword\r\n    }\r\n}\r\n//tham so la mot object \r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type: types.SORT,\r\n        sort: sort\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: false,\r\n        }\r\n        // this.onChange = this.onChange.bind(this);\r\n        \r\n    }\r\n    componentDidMount() {\r\n        if(this.props.itemEditing && this.props.itemEditing.id !== null) {\r\n            this.setState({\r\n                id: this.props.itemEditing.id,\r\n                name: this.props.itemEditing.name,\r\n                status: this.props.itemEditing.status,\r\n            })\r\n        }\r\n        else{\r\n            this.onClear();\r\n        }\r\n    }\r\n    \r\n    // static getDerivedStateFromProps(nextProps,  prevState){\r\n    //     //sua\r\n    //     if(prevState !== nextProps.itemEditing) {\r\n    //         return {\r\n    //             id : nextProps.itemEditing.id,\r\n    //             name : nextProps.itemEditing.name,\r\n    //             status : nextProps.itemEditing.status,\r\n    //         };\r\n    //     }\r\n    //     else {\r\n    //         return null;\r\n    //     }\r\n    // }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.itemEditing !== this.props.itemEditing) {\r\n          this.setState({\r\n            id : this.props.itemEditing.id,\r\n            name : this.props.itemEditing.name,\r\n            status : this.props.itemEditing.status,\r\n          });\r\n        }\r\n      }\r\n     \r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n    \r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        if(name === 'status') {\r\n            value = target.value === 'true' ? true : false;\r\n        }\r\n        // this.setState(TaskForm.getDerivedStateFromProps(this.props, {\r\n        //     [name]: value\r\n        // }))\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n    // onChange = (event) => {\r\n    //     this.setState({\r\n    //       [event.target.name]: event.target.value\r\n    //     });\r\n    //   }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n        this.props.onSaveTask(this.state)\r\n        //cancel & close\r\n        this.onClear();\r\n        this.onCloseForm();\r\n        \r\n    }\r\n    onClear = () => {\r\n        this.setState({\r\n            name: '',\r\n            status: false,\r\n        })\r\n    }\r\n   \r\n    render() {\r\n        // var { id } = this.state;\r\n        if(!this.props.isDisplayForm) return null;\r\n        return(\r\n                <div className=\"panel panel-warning\">\r\n                    <div className=\"panel-heading\">\r\n                        <h3 className=\"panel-title\">  { this.state.id ? 'Cập nhật công việc' : 'Thêm Công Việc'}\r\n                        <span className=\"fa fa-times-circle text-right\" onClick={ this.onCloseForm }></span>\r\n                        </h3>\r\n                        \r\n                    </div>\r\n                    <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                        <label>Tên :</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            name=\"name\"\r\n                            // defaultValue={this.state.name}\r\n                            value={this.state.name}\r\n                            onChange={this.onChange}\r\n\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select \r\n                            className=\"form-control\" \r\n                            required=\"required\" \r\n                            name=\"status\"\r\n                            value={this.state.status}\r\n                            onChange={this.onChange}>\r\n                                <option value={true}>Kích Hoạt</option>\r\n                                <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br />\r\n                        <div className=\"text-center\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">{this.state.id ? 'Lưu lại' : 'Thêm'}</button>&nbsp;\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.onClear()}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\n//dua state tren store thanh props cua class TaskForm\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing,\r\n    }\r\n}\r\n\r\n//tham so thu hai la action de dispatch \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSaveTask: (task) => {\r\n            //dispatch de reducer phan tich action duoc lay tu actions nay\r\n            dispatch(actions.saveTask(task));\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm());\r\n        },\r\n        \r\n        \r\n    }\r\n}\r\n//=> action đã được chuyển thành props TaskForm, chỉ cần gọi action onAddTask kèm tham số là 1 task thì nó sẽ dispatch(chuyển) action này lên trên reducer để phân tích, gọi nó ở onsubmit khi submit form\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyword: ''\r\n        }\r\n        \r\n    }\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n        \r\n    }\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword)\r\n\r\n    }\r\n    render() {\r\n        var { keyword } = this.state;\r\n        return(\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"input-group\">\r\n                        <input type=\"text\" \r\n                                className=\"form-control\"  \r\n                                placeholder=\"Nhập từ khóa...\"\r\n                                value={ keyword }\r\n                                name=\"keyword\"\r\n                                onChange={ this.onChange }\r\n                         />\r\n                        <span className=\"input-group-btn\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\" onClick={ this.onSearch }>\r\n                            <span className=\"fa fa-search mr-5\" />Tìm\r\n                        </button>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearch: (keyword) => {\r\n            dispatch(actions.searchTask(keyword))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index'\r\n\r\nclass Sort extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         sort: {\r\n    //             by: 'name',\r\n    //             value: 1\r\n    //         }\r\n    //     }\r\n    // }\r\n    // static getDerivedStateFromProps(nextProps){\r\n    //     console.log(nextProps)\r\n    //     them\r\n    //     if(nextProps && nextProps.task){\r\n    //       return {\r\n    //         id : nextProps.task.id,\r\n    //         name : nextProps.task.name,\r\n    //         status : nextProps.task.status,\r\n    //        };\r\n    //    }\r\n    //    //Sua thanh them\r\n    //    else if (nextProps && nextProps.task === null){\r\n    //         return {\r\n    //             id: '',\r\n    //             name: '',\r\n    //             status: false,\r\n    //         };\r\n    //    }\r\n    //    else {\r\n    //        return null;\r\n    //    }\r\n    //  }\r\n     \r\n    onClick = (sortBy, sortValue) => {\r\n        this.props.onSort({\r\n            by: sortBy,\r\n            value: sortValue\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            \r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"dropdown\">\r\n                        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\" />\r\n                        </button>\r\n                        <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={ ()=> this.onClick('name', 1) }>\r\n                            <div role=\"button\" \r\n                                className={(this.props.sort.by === 'name' && this.props.sort.value === 1) ? \"sort_selected\": \"\"}\r\n                            >\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                            </span>\r\n                            </div>\r\n                        </li>\r\n                        <li onClick={ ()=> this.onClick('name', -1) }>\r\n                            <div  role=\"button\"\r\n                                className={(this.props.sort.by === 'name' && this.props.sort.value === -1) ? \"sort_selected\": \"\"}\r\n\r\n                            >\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                Tên Z-A\r\n                            </span>\r\n                            </div>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\" />\r\n                        <li>\r\n                            <div role=\"button\" \r\n                                onClick={ ()=> this.onClick('status', 1) }\r\n                                className={(this.props.sort.by === 'status' && this.props.sort.value === 1) ? \"sort_selected\": \"\"}\r\n                            >   Trạng Thái Kích Hoạt\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <div role=\"button\" \r\n                                onClick={ ()=> this.onClick('status', -1) }\r\n                                className={(this.props.sort.by === 'status' && this.props.sort.value === -1) ? \"sort_selected\": \"\"}\r\n                            >Trạng Thái Ẩn\r\n                            </div>\r\n                        </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        sort: state.sort\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSort: (sort) => {\r\n            dispatch(actions.sortTask(sort))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);","import React, { Component } from 'react';\r\nimport Search from './Search'\r\nimport Sort from './Sort'\r\n\r\nclass Control extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"search_sort mt-15\">\r\n                < Search />\r\n                < Sort />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Control ; ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass TaskItem extends Component {\r\n\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n    onDeleteTask = () => {\r\n        this.props.onDeleteTask(this.props.task.id); //dispatch action deleteTask\r\n        this.props.onCloseForm();\r\n    }\r\n    onEditTask = () => {\r\n        this.props.onOpenForm();\r\n        this.props.onEditTask(this.props.task);\r\n    }\r\n\r\n    render() {\r\n\r\n        var { task, index } = this.props;\r\n        return(\r\n            <tr>\r\n                <td>{ index + 1}</td>\r\n                <td>{ task.name }</td>\r\n                <td className=\"text-center\">\r\n                <span \r\n                    className={ task.status === true ? 'label label-success' :  'label label-danger' }\r\n                    onClick={ this.onUpdateStatus }>\r\n                    { task.status === true ? 'Kích hoạt' :  'ẩn' }\r\n                </span>\r\n                \r\n                </td>\r\n                <td className=\"text-center\">\r\n                <button type=\"button\" className=\"btn btn-warning\" onClick = { this.onEditTask }>\r\n                    <span className=\"fa fa-pencil mr-5\" />Sửa\r\n                </button>\r\n                &nbsp;\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick = { this.onDeleteTask }>\r\n                    <span \r\n                    \r\n                        className=\"fa fa-trash mr-5\"\r\n                         />Xóa\r\n                </button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus: (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteTask: (id) => {\r\n            dispatch(actions.deleteTask(id))\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onOpenForm: () => {\r\n            dispatch(actions.openForm());\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(actions.editTask(task));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1 //all: -1, active: 1, an: 0\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        var filter = {\r\n            name: name === 'filterName' ? value : this.state.filterName,\r\n            status: name === 'filterStatus' ? value : this.state.filterStatus\r\n        }\r\n        this.props.onFilterTable(filter)\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    render() {\r\n\r\n        var { filterStatus, filterName } = this.state;\r\n        var { tasks, filterTable, keyword, sort } = this.props; //var tasks = this.props.tasks\r\n\r\n        if (filterTable) {\r\n            if (filterTable.name) { //!== null, !== undefined, !== 0\r\n                tasks = tasks.filter((task) => {\r\n                    return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1 //-1: khong tim thay\r\n                })\r\n            }\r\n            if (filterTable.status) {\r\n                tasks = tasks.filter((task) => {\r\n                    if (filterTable.status === -1) return tasks;\r\n                    else {\r\n                        return task.status === (filterTable.status === 1) ? true : false;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        if (keyword) { //!== null, !== undefined, !== 0\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1 //-1: khong tim thay\r\n            })\r\n        }\r\n        if (sort) {\r\n            if (sort.by === \"name\") {\r\n                tasks.sort((task1, task2) => {\r\n                    if (task1.name > task2.name) return sort.value;\r\n                    else if (task1.name < task2.name) return -sort.value;\r\n                    else return 0;\r\n                })\r\n            }\r\n            else {\r\n                tasks.sort((task1, task2) => {\r\n                    if (task1.status > task2.status) return -sort.value;\r\n                    else if (task1.status < task2.status) return sort.value;\r\n                    else return 0;\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        var elementTask = tasks.map((task, index) => {\r\n            return < TaskItem\r\n                key={task.id}\r\n                index={index}\r\n                task={task}\r\n\r\n            />\r\n        })\r\n        return (\r\n            <table className=\"table table-bordered table-hover mt-15\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">STT</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Trạng Thái</th>\r\n                        <th className=\"text-center\">Hành Động</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td />\r\n                        <td>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"filterName\"\r\n                                value={filterName}\r\n                                onChange={this.onChange}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select className=\"form-control\"\r\n                                name=\"filterStatus\"\r\n                                value={filterStatus}\r\n                                onChange={this.onChange}\r\n                            >\r\n                                <option value={-1}>Tất Cả</option>\r\n                                <option value={0}>Ẩn</option>\r\n                                <option value={1}>Kích Hoạt</option>\r\n                            </select>\r\n                        </td>\r\n                        <td />\r\n                    </tr>\r\n                    {elementTask}\r\n                    {/* < TaskItem /> */}\r\n                </tbody>\r\n            </table>\r\n\r\n        )\r\n    }\r\n}\r\n//Lay state va chuyen no thanh props cuar component nay\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,  //Tasklist co props la todos chua danh sach tasks\r\n        filterTable: state.filterTable,\r\n        isDisplayForm: state.isDisplayForm,\r\n        keyword: state.search,\r\n        sort: state.sort\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable: (filter) => {\r\n            dispatch(actions.filterTask(filter))\r\n\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)","import React, { Component } from 'react';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control'\nimport TaskList from './components/TaskList'\n\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index'\n\nimport './App.css';\n\nclass App extends Component {\n    \n    onToggleForm = () => { //them\n        var itemEditing = this.props.itemEditing;\n        //dang edit ban them cong viec\n        if(itemEditing && itemEditing.id !== '') {\n            this.props.onOpenForm()\n        }\n        //bam them cong viec binh thuong\n        else{\n            this.props.onToggleForm()\n        }\n\n        this.props.onClearTask({\n            id: '',\n            name: '',\n            status: false\n        })\n    }\n\n    render() {\n        return (\n           <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr />\n                </div>\n                <div className=\"row\">\n                    <div className={ this.props.isDisplayForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                    < TaskForm />\n                    </div>\n                    <div className= { this.props.isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>\n                            <span className=\"fa fa-plus mr-5\" />Thêm Công Việc\n                        </button>\n                    <div className=\"row mb-5\">\n                        < Control/>\n                    </div>\n                    <div className=\"row mt-15\">\n                        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                            < TaskList />\n                           \n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    //state cua store, state lay ra tu reducers/index.js\n    return {\n        isDisplayForm: state.isDisplayForm,\n        itemEditing: state.itemEditing,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        //actions được import từ file actions ở trên cùng\n        onToggleForm: () => {\n            dispatch(actions.toggleForm())\n            \n        },\n        \n        onOpenForm: () => {\n            dispatch(actions.openForm())\n        },\n        onClearTask: (task) => {\n            //dispatch de reducer phan tich action duoc lay tu actions nay\n            dispatch(actions.editTask(task));\n        },\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as types from './../constants/ActionTypes';\r\n\r\nvar s4 = () => {\r\n    return Math.floor( (1 + Math.random()) * 0x10000 ).toString(16).substring(1);\r\n}\r\nvar generateId = () => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4()  + s4();\r\n}\r\nvar findIndex = (tasks, id) => {\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n        if(task.id === id) {\r\n            return result = index;\r\n        }\r\n        \r\n    })\r\n    return result;\r\n}\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\n\r\nvar initialState = data ? data : [];\r\n\r\nvar id = 0;\r\nvar index = -1;\r\n\r\n//state lay tu tren localStorage, action là cái nhận được từ TaskForm được dispatch lên\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n            // break;\r\n        case types.SAVE_TASK:\r\n            \r\n            // var newTask = {\r\n            //     id: generateId(),\r\n            //     name: action.task.name,\r\n            //     status: action.task.status\r\n            // }\r\n            // state.push(newTask);\r\n\r\n            var newTask = {\r\n                id: action.task.id ? action.task.id : null,\r\n                name: action.task.name,\r\n                status: action.task.status\r\n            }\r\n            \r\n            if(newTask.id === null) {\r\n                newTask.id = generateId();\r\n                //đẩy vào state cua store\r\n                state.push(newTask);\r\n            }else{\r\n                index = findIndex(state, newTask.id);\r\n                state[index] = newTask;\r\n            }\r\n            //luu state len localStorage\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n\r\n            //copy state ra mot arr moi va tra ve arr moi do\r\n            return [...state];\r\n\r\n        case types.UPDATE_STATUS:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n\r\n            //Cach 1\r\n            // var cloneTask = {...state[index]};\r\n            // cloneTask.status = !cloneTask.status;\r\n            // // state.splice(index, 1);\r\n            // // state.push(cloneTask);\r\n            // state[index] = cloneTask;\r\n\r\n            state[index] = {\r\n                ...state[index],\r\n                status: !state[index].status\r\n            }\r\n\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n            if(index !== -1) {\r\n                state.splice(index, 1)\r\n                localStorage.setItem('tasks', JSON.stringify(state));\r\n            }\r\n            return [...state];\r\n        default: return state;\r\n    }\r\n    // return state;\r\n}\r\nexport default myReducer;\r\n//clone task moi = task cu co status toggle la\r\n//xoa task cu, them task moi vao\r\n\r\n","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = false;\r\n\r\n//state lay tu tren localStorage, action là cái nhận được từ TaskForm được dispatch lên\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_FORM:\r\n            state = !state;\r\n            return state;\r\n\r\n        case types.CLOSE_FORM:\r\n            state = false;\r\n            return state;\r\n            \r\n        case types.OPEN_FORM:\r\n            state = true;\r\n            return state;\r\n            \r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case types.EDIT_TASK:\r\n            return action.task;\r\n\r\n        default: return state;\r\n    }\r\n\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    name: '',\r\n    status: -1\r\n}\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.FILTER_TABLE:\r\n            action.filter.status = parseInt(action.filter.status, 10);\r\n            \r\n            return action.filter;\r\n    \r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SEARCH:\r\n            return action.keyword;\r\n    \r\n        default: return state\r\n    }\r\n}\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    by: 'name',\r\n    value: 1   //1 kich haotj, 0 an\r\n}\r\nvar myReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SORT:\r\n            return {\r\n                by: action.sort.by,\r\n                value: action.sort.value   \r\n            };\r\n    \r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import { combineReducers } from \"redux\";\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\nconst myReducer = combineReducers({\r\n    tasks: tasks,\r\n    isDisplayForm: isDisplayForm,\r\n    itemEditing: itemEditing,\r\n    filterTable: filterTable,\r\n    search: search,\r\n    sort: sort\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//Store\nimport { createStore } from 'redux';\n\nimport myReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(myReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}